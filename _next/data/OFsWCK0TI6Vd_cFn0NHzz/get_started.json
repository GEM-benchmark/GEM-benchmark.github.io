{"pageProps":{"tutorialData":{"contentHtml":"<p>This tutorial presents a full walk-through how to get started with GEM, how to load and inspect data, how to finetune a baseline model, and how to generate predictions.\nThroughout this tutorial, we will focus on the CommonGen task, but we will note\nwhat changes to make to use another of the GEM datasets.</p>\n<p><strong>SUBMITTING</strong> Our <a href=\"https://forms.gle/vbTZDMCuqzok8tTA9\">submission form</a> is permanently open! Please account for some extra time to write your model card.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#preliminaries\">Preliminaries</a></li>\n<li><a href=\"#loading-the-data\">Loading the Data</a>\n<ul>\n<li><a href=\"#loading-a-single-example\">Loading a single example</a></li>\n</ul>\n</li>\n<li><a href=\"#finetuning-a-pretrained-model\">Finetuning a pretrained model</a></li>\n<li><a href=\"#generating-and-evaluating-predictions\">Generating and evaluating Predictions</a></li>\n<li><a href=\"#generating-and-submitting-test-predictions\">Generating and Submitting Test Predictions</a>\n<ul>\n<li><a href=\"#format-description\">Format Description</a></li>\n<li><a href=\"#formatting-your-predictions\">Formatting your predictions</a></li>\n</ul>\n</li>\n<li><a href=\"#evaluating-your-submission-file-with-the-gem-evaluation-framework\">Evaluating your submission file with the GEM evaluation framework.</a></li>\n</ul>\n<h2 id=\"preliminaries\">Preliminaries</h2>\n<p>This tutorial uses PyTorch and the HuggingFace infrastructure to finetune models. You need to install the following dependencies:</p>\n<pre><code class=\"hljs language-bash\">pip install git+https://github.com/huggingface/datasets.git\npip install rouge_score\npip install sentencepiece\npip install transformers</code></pre>\n<p>We further assume access to a GPU in this tutorial. You should be able to run all the code inside of a <a href=\"https://colab.research.google.com/\">colab notebook for free GPU access</a>.</p>\n<h2 id=\"loading-the-data\">Loading the Data</h2>\n<p>We will be using <a href=\"https://huggingface.co/docs/datasets/gem\">HuggingFace datasets</a>, but the GEM datasets are available in <a href=\"https://www.tensorflow.org/datasets\">TFDS</a> as well.</p>\n<p>You can load and inspect datasets like this:</p>\n<pre><code class=\"hljs language-python\">>> <span class=\"hljs-keyword\">from</span> datasets <span class=\"hljs-keyword\">import</span> load_dataset\n>> data = load_dataset(<span class=\"hljs-string\">\"gem\"</span>, <span class=\"hljs-string\">\"common_gen\"</span>)\n>> data\n\nDatasetDict({\n    train: Dataset({\n        features: [<span class=\"hljs-string\">'gem_id'</span>, <span class=\"hljs-string\">'gem_parent_id'</span>, <span class=\"hljs-string\">'concept_set_id'</span>, <span class=\"hljs-string\">'concepts'</span>, <span class=\"hljs-string\">'target'</span>, <span class=\"hljs-string\">'references'</span>],\n        num_rows: <span class=\"hljs-number\">67389</span>\n    })\n    validation: Dataset({\n        features: [<span class=\"hljs-string\">'gem_id'</span>, <span class=\"hljs-string\">'gem_parent_id'</span>, <span class=\"hljs-string\">'concept_set_id'</span>, <span class=\"hljs-string\">'concepts'</span>, <span class=\"hljs-string\">'target'</span>, <span class=\"hljs-string\">'references'</span>],\n        num_rows: <span class=\"hljs-number\">993</span>\n    })\n    test: Dataset({\n        features: [<span class=\"hljs-string\">'gem_id'</span>, <span class=\"hljs-string\">'gem_parent_id'</span>, <span class=\"hljs-string\">'concept_set_id'</span>, <span class=\"hljs-string\">'concepts'</span>, <span class=\"hljs-string\">'target'</span>, <span class=\"hljs-string\">'references'</span>],\n        num_rows: <span class=\"hljs-number\">1497</span>\n    })\n    challenge_train_sample: Dataset({\n        features: [<span class=\"hljs-string\">'gem_id'</span>, <span class=\"hljs-string\">'gem_parent_id'</span>, <span class=\"hljs-string\">'concept_set_id'</span>, <span class=\"hljs-string\">'concepts'</span>, <span class=\"hljs-string\">'target'</span>, <span class=\"hljs-string\">'references'</span>],\n        num_rows: <span class=\"hljs-number\">500</span>\n    })\n    challenge_validation_sample: Dataset({\n        features: [<span class=\"hljs-string\">'gem_id'</span>, <span class=\"hljs-string\">'gem_parent_id'</span>, <span class=\"hljs-string\">'concept_set_id'</span>, <span class=\"hljs-string\">'concepts'</span>, <span class=\"hljs-string\">'target'</span>, <span class=\"hljs-string\">'references'</span>],\n        num_rows: <span class=\"hljs-number\">500</span>\n    })\n    challenge_test_scramble: Dataset({\n        features: [<span class=\"hljs-string\">'gem_id'</span>, <span class=\"hljs-string\">'gem_parent_id'</span>, <span class=\"hljs-string\">'concept_set_id'</span>, <span class=\"hljs-string\">'concepts'</span>, <span class=\"hljs-string\">'target'</span>, <span class=\"hljs-string\">'references'</span>],\n        num_rows: <span class=\"hljs-number\">500</span>\n    })\n})</code></pre>\n<p>You can notice that challenge sets created as part of GEM act just like any other data split, which means that you can use them with exactly the same code!</p>\n<p>GEM supports many other datasets, simply pick one from this list and check out the corresponding <a href=\"/data_cards\">data cards</a>.</p>\n<pre><code class=\"hljs language-py\">[<span class=\"hljs-string\">'common_gen'</span>, <span class=\"hljs-string\">'cs_restaurants'</span>, <span class=\"hljs-string\">'dart'</span>, <span class=\"hljs-string\">'mlsum_de'</span>, <span class=\"hljs-string\">'mlsum_es'</span>, <span class=\"hljs-string\">'xsum'</span>,  \n <span class=\"hljs-string\">'e2e_nlg'</span>, <span class=\"hljs-string\">'schema_guided_dialog'</span>, <span class=\"hljs-string\">'totto'</span>, <span class=\"hljs-string\">'web_nlg_en'</span>, <span class=\"hljs-string\">'web_nlg_ru'</span>, \n  <span class=\"hljs-string\">'wiki_auto_asset_turk'</span>, <span class=\"hljs-string\">'wiki_lingua_arabic_ar'</span>, <span class=\"hljs-string\">'wiki_lingua_chinese_zh'</span>, \n  <span class=\"hljs-string\">'wiki_lingua_czech_cs'</span>, <span class=\"hljs-string\">'wiki_lingua_dutch_nl'</span>, <span class=\"hljs-string\">'wiki_lingua_english_en'</span>, \n  <span class=\"hljs-string\">'wiki_lingua_french_fr'</span>, <span class=\"hljs-string\">'wiki_lingua_german_de'</span>, <span class=\"hljs-string\">'wiki_lingua_hindi_hi'</span>, \n  <span class=\"hljs-string\">'wiki_lingua_indonesian_id'</span>, <span class=\"hljs-string\">'wiki_lingua_italian_it'</span>, \n  <span class=\"hljs-string\">'wiki_lingua_japanese_ja'</span>, <span class=\"hljs-string\">'wiki_lingua_korean_ko'</span>, \n  <span class=\"hljs-string\">'wiki_lingua_portuguese_pt'</span>, <span class=\"hljs-string\">'wiki_lingua_russian_ru'</span>, \n  <span class=\"hljs-string\">'wiki_lingua_spanish_es'</span>, <span class=\"hljs-string\">'wiki_lingua_thai_th'</span>, \n  <span class=\"hljs-string\">'wiki_lingua_turkish_tr'</span>, <span class=\"hljs-string\">'wiki_lingua_vietnamese_vi'</span>]</code></pre>\n<h3 id=\"loading-a-single-example\">Loading a single example</h3>\n<p>Now let's look at a single example:</p>\n<pre><code class=\"hljs language-python\">>> data[<span class=\"hljs-string\">'train'</span>][<span class=\"hljs-number\">0</span>]\n\n{<span class=\"hljs-string\">'concept_set_id'</span>: <span class=\"hljs-number\">0</span>,\n <span class=\"hljs-string\">'concepts'</span>: [<span class=\"hljs-string\">'mountain'</span>, <span class=\"hljs-string\">'ski'</span>, <span class=\"hljs-string\">'skier'</span>],\n <span class=\"hljs-string\">'gem_id'</span>: <span class=\"hljs-string\">'common_gen-train-0'</span>,\n <span class=\"hljs-string\">'references'</span>: [],\n <span class=\"hljs-string\">'target'</span>: <span class=\"hljs-string\">'Skier skis down the mountain'</span>}</code></pre>\n<p>CommonGen is a task that asks for the production of a sentence (<code>target</code>) from a set of concepts (<code>concepts</code>). Since one concept set can generate multiple meaningful sentences, the example also includes a unique identifier (<code>concept_set_idx</code>) so that multiple references can be linked to an input.</p>\n<p>Next, let's define utility functions that can generate batches of (tokenized) examples which we can use during training.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">construct_input_for_batch</span>(<span class=\"hljs-params\">batch</span>):</span>\n  <span class=\"hljs-string\">\"\"\"\n  Function that takes a batch from a dataset and constructs the corresponding\n  input string.\n  \"\"\"</span>\n  source = [<span class=\"hljs-string\">' '</span>.join(concepts) <span class=\"hljs-keyword\">for</span> concepts <span class=\"hljs-keyword\">in</span> batch [<span class=\"hljs-string\">\"concepts\"</span>]]\n  target = batch[<span class=\"hljs-string\">\"target\"</span>]\n  <span class=\"hljs-keyword\">return</span> source, target\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">batch_tokenize</span>(<span class=\"hljs-params\">dataset_batch, tokenizer, decoder_max_length=<span class=\"hljs-number\">32</span></span>):</span>\n  <span class=\"hljs-string\">\"\"\"\n  Construct the batch (source, target) and run them through a tokenizer.\n  \"\"\"</span>\n  source, target = construct_input_for_batch(dataset_batch)\n  res = {\n      <span class=\"hljs-string\">\"input_ids\"</span>: tokenizer(source)[<span class=\"hljs-string\">\"input_ids\"</span>],\n      <span class=\"hljs-string\">\"labels\"</span>: tokenizer(\n          target,\n          padding=<span class=\"hljs-string\">'max_length'</span>,\n          truncation=<span class=\"hljs-literal\">True</span>,\n          max_length=decoder_max_length\n      )[<span class=\"hljs-string\">\"input_ids\"</span>],\n  }\n  <span class=\"hljs-keyword\">return</span> res</code></pre>\n<p>All we need to do now to preprocess the dataset is to call <code>batch_tokenize</code> on it. For our example, we are using BART-base as a model and we need to load the corresponding tokenizer:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> transformers <span class=\"hljs-keyword\">import</span> AutoTokenizer\ntokenizer = AutoTokenizer.from_pretrained(<span class=\"hljs-string\">'facebook/bart-base'</span>)\n\ntrain_data_tokenized = data[<span class=\"hljs-string\">'train'</span>].<span class=\"hljs-built_in\">map</span>(\n  <span class=\"hljs-keyword\">lambda</span> batch: batch_tokenize(batch, tokenizer, DATASET_NAME, decoder_max_length=DECODER_MAX_LENGTH),\n  batched=<span class=\"hljs-literal\">True</span>\n)\nvalid_data_tokenized = data[<span class=\"hljs-string\">'validation'</span>].<span class=\"hljs-built_in\">map</span>(\n  <span class=\"hljs-keyword\">lambda</span> batch: batch_tokenize(batch, tokenizer, DATASET_NAME, decoder_max_length=DECODER_MAX_LENGTH),\n  batched=<span class=\"hljs-literal\">True</span>\n)</code></pre>\n<h2 id=\"finetuning-a-pretrained-model\">Finetuning a pretrained model</h2>\n<p>We can now utilize the preprocessed data to finetune a model. To do so, we will utilize the <a href=\"https://huggingface.co/transformers/main_classes/trainer.html#seq2seqtrainingarguments\">Trainer API</a> which handles gradient updates, model selection, and evaluation for us.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> transformers <span class=\"hljs-keyword\">import</span> AutoModelForSeq2SeqLM, Seq2SeqTrainer, Seq2SeqTrainingArguments</code></pre>\n<p>To improve model selection, let's pick the model that has the best test performance on ROUGE-2, a metric that is typically associated with higher fluency. We can do this by constructing a function that returns a function that computes the score and we only have to pass it to our trainer.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> datasets <span class=\"hljs-keyword\">import</span> load_metric\n\nrouge_scorer = load_metric(<span class=\"hljs-string\">\"rouge\"</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">rouge_metric_builder</span>(<span class=\"hljs-params\">tokenizer</span>):</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">compute_rouge_metrics</span>(<span class=\"hljs-params\">pred</span>):</span>\n    <span class=\"hljs-string\">\"\"\"utility to compute ROUGE during training.\"\"\"</span>\n    labels_ids = pred.label_ids\n    pred_ids = pred.predictions\n    <span class=\"hljs-comment\"># All special tokens are removed.</span>\n    pred_str = tokenizer.batch_decode(pred_ids, skip_special_tokens=<span class=\"hljs-literal\">True</span>)\n    labels_ids[labels_ids == -<span class=\"hljs-number\">100</span>] = tokenizer.pad_token_id\n    label_str = tokenizer.batch_decode(labels_ids, skip_special_tokens=<span class=\"hljs-literal\">True</span>)\n    <span class=\"hljs-comment\"># Compute the metric.</span>\n    rouge_results = rouge_scorer.compute(\n        predictions=pred_str,\n        references=label_str,\n        rouge_types=[<span class=\"hljs-string\">\"rouge2\"</span>, <span class=\"hljs-string\">\"rougeL\"</span>],\n        use_agregator=<span class=\"hljs-literal\">True</span>,\n        use_stemmer=<span class=\"hljs-literal\">False</span>,\n    )\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-string\">\"rouge2\"</span>: <span class=\"hljs-built_in\">round</span>(rouge_results[<span class=\"hljs-string\">'rouge2'</span>].mid.fmeasure, <span class=\"hljs-number\">4</span>),\n        <span class=\"hljs-string\">\"rougeL\"</span>: <span class=\"hljs-built_in\">round</span>(rouge_results[<span class=\"hljs-string\">'rougeL'</span>].mid.fmeasure, <span class=\"hljs-number\">4</span>),\n    }\n  <span class=\"hljs-keyword\">return</span> compute_rouge_metrics\n\nrouge_metric_fn = rouge_metric_builder(tokenizer)</code></pre>\n<p>Fantastic, now all we have to do is set up our trainer class with everything we defined so far and train it!</p>\n<pre><code class=\"hljs language-python\">model = AutoModelForSeq2SeqLM.from_pretrained(<span class=\"hljs-string\">'facebook/bart-base'</span>)\nmodel = model.to(<span class=\"hljs-string\">'cuda:0'</span>)\n\ntrain_args = Seq2SeqTrainingArguments(\n    output_dir=<span class=\"hljs-string\">\"BART-commongen\"</span>,\n    do_train=<span class=\"hljs-literal\">True</span>,\n    do_eval=<span class=\"hljs-literal\">True</span>,\n    evaluation_strategy=<span class=\"hljs-string\">\"epoch\"</span>,\n    logging_steps=<span class=\"hljs-number\">100</span>,\n    <span class=\"hljs-comment\"># optimization args, the trainer uses the Adam optimizer</span>\n    <span class=\"hljs-comment\"># and has a linear warmup for the learning rate</span>\n    per_device_train_batch_size=<span class=\"hljs-number\">32</span>,\n    per_device_eval_batch_size=<span class=\"hljs-number\">32</span>,\n    gradient_accumulation_steps=<span class=\"hljs-number\">1</span>,\n    learning_rate=<span class=\"hljs-number\">1e-04</span>,\n    num_train_epochs=<span class=\"hljs-number\">3</span>,\n    warmup_steps=<span class=\"hljs-number\">1000</span>,\n    <span class=\"hljs-comment\"># misc args</span>\n    seed=<span class=\"hljs-number\">42</span>,\n    disable_tqdm=<span class=\"hljs-literal\">False</span>,\n    load_best_model_at_end=<span class=\"hljs-literal\">True</span>,\n    metric_for_best_model=<span class=\"hljs-string\">\"rouge2\"</span>,\n    <span class=\"hljs-comment\"># generation</span>\n    predict_with_generate=<span class=\"hljs-literal\">True</span>,\n)\n\ntrainer = Seq2SeqTrainer(\n    model=model,\n    args=train_args,\n    train_dataset=train_data_tokenized,\n    eval_dataset=valid_data_tokenized,\n    tokenizer=tokenizer,\n    compute_metrics=rouge_metric_fn,\n)\n\ntrainer._max_length = DECODER_MAX_LENGTH\ntrainer._num_beams = BEAM_SIZE</code></pre>\n<p>And finally:</p>\n<pre><code class=\"hljs language-python\">>> trainer.train()\n\nEpoch\tTraining Loss\tValidation Loss\tRouge2\t    Rougel\n<span class=\"hljs-number\">1</span>\t<span class=\"hljs-number\">1.081300</span>\t<span class=\"hljs-number\">1.063452</span>\t<span class=\"hljs-number\">0.121900</span>\t<span class=\"hljs-number\">0.319900</span>\n<span class=\"hljs-number\">2</span>\t<span class=\"hljs-number\">0.948100</span>\t<span class=\"hljs-number\">1.086376</span>\t<span class=\"hljs-number\">0.134000</span>\t<span class=\"hljs-number\">0.329800</span>\n<span class=\"hljs-number\">3</span>\t<span class=\"hljs-number\">0.820100</span>\t<span class=\"hljs-number\">1.077763</span>\t<span class=\"hljs-number\">0.133900</span>\t<span class=\"hljs-number\">0.328000</span></code></pre>\n<p>We now have a model that achieves 13.4 ROUGE-2 which can obviously still be tuned, but it is a great starting point.</p>\n<h2 id=\"generating-and-evaluating-predictions\">Generating and evaluating Predictions</h2>\n<p>Given that we now have a model, we also want to generate model outputs now. For this, let's build another two utility functions that generate a batch with only model inputs and which generate and detokenize text with a model.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">make_batch_inputs</span>(<span class=\"hljs-params\">batch, tokenizer, device=<span class=\"hljs-string\">'cuda:0'</span></span>):</span>\n  <span class=\"hljs-string\">\"\"\"\n  Function that takes a batch from a dataset and formats it as input to model.\n  \"\"\"</span>\n  <span class=\"hljs-comment\"># Concatenate the concept names for each example in the batch.</span>\n  input_lists, _ = construct_input_for_batch(batch)\n  <span class=\"hljs-comment\"># Use the model's tokenizer to create the batch input_ids.</span>\n  batch_features = tokenizer(input_lists, padding=<span class=\"hljs-literal\">True</span>, return_tensors=<span class=\"hljs-string\">'pt'</span>)\n  <span class=\"hljs-comment\"># Move all inputs to the device.</span>\n  batch_features = <span class=\"hljs-built_in\">dict</span>([(k, v.to(device)) <span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\">in</span> batch_features.items()])\n  <span class=\"hljs-keyword\">return</span> batch_features\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">beam_generate_sentences</span>(<span class=\"hljs-params\">batch,\n                            model,\n                            tokenizer,\n                            num_beams=<span class=\"hljs-number\">4</span>,\n                            max_length=<span class=\"hljs-number\">32</span>,\n                            device=<span class=\"hljs-string\">'cuda:0'</span></span>):</span>\n  <span class=\"hljs-string\">\"\"\"\n  Function to generate outputs from a model with beam search decoding.\n  \"\"\"</span>\n  <span class=\"hljs-comment\"># Create batch inputs.</span>\n  features = make_batch_inputs(\n      batch=batch,\n      tokenizer=tokenizer,\n      device=device)\n  <span class=\"hljs-comment\"># Generate with beam search.</span>\n  generated_ids = model.generate(\n      input_ids=features[<span class=\"hljs-string\">'input_ids'</span>],\n      attention_mask=features[<span class=\"hljs-string\">'attention_mask'</span>],\n      num_beams=num_beams,\n      max_length=max_length,\n  )\n  <span class=\"hljs-comment\"># Use model tokenizer to decode to text.</span>\n  generated_sentences = [\n      tokenizer.decode(gen_ids.tolist(), skip_special_tokens=<span class=\"hljs-literal\">True</span>)\n      <span class=\"hljs-keyword\">for</span> gen_ids <span class=\"hljs-keyword\">in</span> generated_ids\n  ]\n  <span class=\"hljs-keyword\">return</span> generated_sentences</code></pre>\n<p>We can quickly apply this function across our validation set as a sanity check.</p>\n<pre><code class=\"hljs language-python\">valid_output = data[<span class=\"hljs-string\">'validation'</span>].<span class=\"hljs-built_in\">map</span>(\n    <span class=\"hljs-keyword\">lambda</span> batch: {<span class=\"hljs-string\">'generated'</span>: beam_generate_sentences(\n        batch,\n        model,\n        tokenizer,\n        num_beams=BEAM_SIZE,\n        max_length=MAX_GENERATION_LENGTH)\n    },\n    batched=<span class=\"hljs-literal\">True</span>,\n    batch_size=<span class=\"hljs-number\">128</span>,\n)\n\nrouge_scorer = load_metric(<span class=\"hljs-string\">\"rouge\"</span>)\n<span class=\"hljs-comment\"># Evaluate for ROUGE-2/L</span>\nrouge_results = rouge_scorer.compute(\n    predictions=valid_output[<span class=\"hljs-string\">\"generated\"</span>],\n    references=valid_output[<span class=\"hljs-string\">\"target\"</span>],\n    rouge_types=[<span class=\"hljs-string\">\"rouge2\"</span>, <span class=\"hljs-string\">\"rougeL\"</span>],\n    use_agregator=<span class=\"hljs-literal\">True</span>, use_stemmer=<span class=\"hljs-literal\">False</span>,\n)\n\n<span class=\"hljs-string\">f\"R-2: <span class=\"hljs-subst\">{rouge_results[<span class=\"hljs-string\">'rouge2'</span>].mid.fmeasure:<span class=\"hljs-number\">.3</span>f}</span> R-L: <span class=\"hljs-subst\">{rouge_results[<span class=\"hljs-string\">'rougeL'</span>].mid.fmeasure:<span class=\"hljs-number\">.3</span>f}</span>\"</span></code></pre>\n<p>As expected, this yields the following output:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-string\">'R-2: 0.134 R-L: 0.329'</span></code></pre>\n<h2 id=\"generating-and-submitting-test-predictions\">Generating and Submitting Test Predictions</h2>\n<h3 id=\"format-description\">Format Description</h3>\n<p>Please format submissions in the following format</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"submission_name\"</span>: <span class=\"hljs-string\">\"An identifying name of your system\"</span>,\n  <span class=\"hljs-attr\">\"param_count\"</span>: <span class=\"hljs-number\">123</span>, # the number of parameters your system has.\n  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"An optional brief description of the system that will be shown on the website\"</span>,\n  <span class=\"hljs-attr\">\"tasks\"</span>:\n    {\n      <span class=\"hljs-attr\">\"dataset_identifier\"</span>: {\n        <span class=\"hljs-attr\">\"values\"</span>: [<span class=\"hljs-string\">\"output1\"</span>, <span class=\"hljs-string\">\"output2\"</span>, <span class=\"hljs-string\">\"...\"</span>], # A list of system outputs\n        # Optionally, you can add the keys which are part of an example to ensure that there is no shuffling mistakes.\n        <span class=\"hljs-attr\">\"keys\"</span>: [<span class=\"hljs-string\">\"schema_guided_dialog-test-9585\"</span>, <span class=\"hljs-string\">\"schema_guided_dialog-test-9585\"</span>, ...] \n        }\n    }\n}\n</code></pre>\n<p>In this case, <code>dataset_identifier</code> is the identifier of the dataset followed by an identifier of the set the outputs were created from, for example <code>_validation</code> or <code>_test</code>. That means, the common_gen validation set would have the identifier <code>common_gen_validation</code>.</p>\n<p>The <code>keys</code> field can be set to avoid accidental shuffling to impact your metrics. Simply add a list of the <code>gem_id</code> for each output example in the same order as your values.</p>\n<h3 id=\"formatting-your-predictions\">Formatting your predictions</h3>\n<p>To format your model outputs for GEM, let's first assume that we have the test and challenge set outputs similar to our validation outputs above. The code is adding a <code>generated</code> field into the dataset which makes analysis much easier.\nHowever, in our submission file we only want the actual values and corresponding IDs. Thus, we filter:</p>\n<pre><code class=\"hljs language-python\">valid_formatted = [o[<span class=\"hljs-string\">'generated'</span>] <span class=\"hljs-keyword\">for</span> o <span class=\"hljs-keyword\">in</span> valid_output]\nvalid_keys = [o[<span class=\"hljs-string\">'gem_id'</span>] <span class=\"hljs-keyword\">for</span> o <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'validation'</span>]]\n\ntest_formatted = [o[<span class=\"hljs-string\">'generated'</span>] <span class=\"hljs-keyword\">for</span> o <span class=\"hljs-keyword\">in</span> test_output]\ntest_keys = [o[<span class=\"hljs-string\">'gem_id'</span>] <span class=\"hljs-keyword\">for</span> o <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'test'</span>]]\n\nchallenge_train_sample_formatted = [o[<span class=\"hljs-string\">'generated'</span>] <span class=\"hljs-keyword\">for</span> o <span class=\"hljs-keyword\">in</span> challenge_train_sample_output]\nchallenge_train_sample_keys = [o[<span class=\"hljs-string\">'gem_id'</span>] <span class=\"hljs-keyword\">for</span> o <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'challenge_train_sample'</span>]]</code></pre>\n<p>In our final step, we only have to add the outputs to our larger submission construct.</p>\n<pre><code class=\"hljs language-python\">submission_dict = {\n    <span class=\"hljs-string\">\"submission_name\"</span>: <span class=\"hljs-string\">\"BART-base\"</span>,\n    <span class=\"hljs-string\">\"param_count\"</span>: <span class=\"hljs-built_in\">sum</span>(p.numel() <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> model.parameters()),\n    <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Baseline for the task based on BART-base.\"</span>,\n    <span class=\"hljs-string\">\"tasks\"</span>: {\n      <span class=\"hljs-string\">\"common_gen_validation\"</span>: {<span class=\"hljs-string\">\"values\"</span>: valid_formatted, <span class=\"hljs-string\">\"keys\"</span>: valid_keys},\n      <span class=\"hljs-string\">\"common_gen_test\"</span>: {<span class=\"hljs-string\">\"values\"</span>: test_formatted, <span class=\"hljs-string\">\"keys\"</span>: test_keys},\n      <span class=\"hljs-string\">\"common_gen_challenge_train_sample\"</span>: {<span class=\"hljs-string\">\"values\"</span>: challenge_train_sample_formatted, \n                                            <span class=\"hljs-string\">\"keys\"</span>: challenge_train_sample_keys}\n    }\n}</code></pre>\n<p>This format is scalable to more tasks, you simply need to add more outputs to the <code>tasks</code> subfield.\nThe last step is to write our submission dictionary to a file.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'gem_submission.json'</span>, <span class=\"hljs-string\">'w'</span>) <span class=\"hljs-keyword\">as</span> f:\n  f.write(json.dumps(submission_dict, indent=<span class=\"hljs-number\">2</span>))</code></pre>\n<h2 id=\"evaluating-your-submission-file-with-the-gem-evaluation-framework\">Evaluating your submission file with the GEM evaluation framework.</h2>\n<p>Obviously, we do not want to rely only on ROUGE scores. For this, we developed the GEM evaluation framework. You can download it by running</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> git@github.com:GEM-benchmark/GEM-metrics.git</code></pre>\n<p>Assuming that you formatted your outputs correctly, you can now run</p>\n<pre><code class=\"hljs language-bash\">python run_metrics.py [-r references.json] [-o outputs.scores.json] outputs.json </code></pre>\n<p>which will create a json file with your scores per task and challenge set. Please follow the <a href=\"https://github.com/GEM-benchmark/GEM-metrics\">README</a> for more detailed usage information.</p>\n","title":"Getting Started with GEM"}},"__N_SSG":true}